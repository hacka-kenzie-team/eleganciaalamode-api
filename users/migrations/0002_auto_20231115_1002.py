# Generated by Django 4.2.7 on 2023-11-15 13:02
from django.db import migrations
from _core.default_data.users import default_user_list
from _core.default_data.orders import default_orders_list
from _core.default_data.order_items import default_order_items
from _core.default_data.products import default_products
from _core.default_data.comments import default_comments


def create_default_data(apps, schema_editor):
    User = apps.get_model('users', 'User')
    Order = apps.get_model('orders', 'Order')
    OrderItem = apps.get_model('order_items', 'OrderItem')
    Product = apps.get_model('products', 'Product')
    Product_style = apps.get_model('product_styles', 'Product_style')
    Keyword = apps.get_model('keywords', 'Keyword')
    Comment = apps.get_model('comments', 'Comment')

    for entry in default_user_list:
        if entry["is_superuser"] is True:
            User.objects.create_superuser(**entry)
        else:
            User.objects.create_user(**entry)

    for entry in default_orders_list:
        found_user = User.objects.get(name=entry["user"])
        entry.pop("user")
        Order.objects.create(**entry, user=found_user)

    for entry in default_order_items:
        found_order = Order.objects.get(pk=entry["order"])
        entry.pop("order")
        OrderItem.objects.create(**entry, order=found_order)
        found_order.save()

    for entry in default_products:
        keyword_list = Keyword.objects.all()
        keyword_data = entry.pop("keywords")
        style_data = entry.pop("style")
        style = Product_style(**style_data)
        style.save()
        product = Product.objects.create(**entry, style=style)
        for instance in keyword_data:
            if instance not in keyword_list.values("entry"):
                new_keyword = Keyword.objects.create(**instance)
                product.keywords.add(new_keyword)
            else:
                reused_keyword = Keyword.objects.get(entry=instance["entry"])
                product.keywords.add(reused_keyword)
        product.save()

    for entry in default_comments:
        user_name = User.objects.get(name=entry["user_name"])
        product_name = Product.objects.get(name=entry["product_name"])
        entry.pop("user_name")
        entry.pop("product_name")
        Comment.objects.create(
            **entry,
            user_name=user_name,
            product_name=product_name
        )


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_data),
    ]
